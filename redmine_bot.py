import os
import asyncio
import requests
import logging
from datetime import datetime
from telegram import Bot
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
REDMINE_URL = os.getenv("REDMINE_URL_ENV")  # URL Redmine
REDMINE_API_KEY = os.getenv("REDMINE_API_KEY_ENV")  # API-–∫–ª—é—á Redmine
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN_ENV")  # –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
TELEGRAM_CHAT_ID_SSB = os.getenv("TELEGRAM_CHAT_ID_SSB_ENV")  # ID —á–∞—Ç–∞ –¥–ª—è –∑–∞—è–≤–æ–∫ SSB
TELEGRAM_CHAT_ID_OTHER = os.getenv("TELEGRAM_CHAT_ID_OTHER_ENV")  # ID —á–∞—Ç–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞—è–≤–æ–∫
PROJECT_ID = os.getenv("REDMINE_PROJECT_ID_ENV")  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –≤ Redmine

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([REDMINE_URL, REDMINE_API_KEY, TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID_SSB, TELEGRAM_CHAT_ID_OTHER, PROJECT_ID]):
    logger.error("–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: REDMINE_URL, REDMINE_API_KEY, TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID_SSB, TELEGRAM_CHAT_ID_OTHER, PROJECT_ID")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)

async def get_last_issue_updates():
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –≤—Å–µ–º –∑–∞—è–≤–∫–∞–º –≤ –ø—Ä–æ–µ–∫—Ç–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å ID –∑–∞—è–≤–æ–∫ –∏ –∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    """
    url = f"{REDMINE_URL}/issues.json"
    headers = {
        "X-Redmine-API-Key": REDMINE_API_KEY
    }
    params = {
        "project_id": PROJECT_ID,
        "include": "journals"
    }
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ Redmine API: {url} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {params}")
        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
        issues = response.json().get("issues", [])
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {issues}")
        updates = {}
        for issue in issues:
            issue_id = issue["id"]
            updated_on = issue["updated_on"]
            updates[issue_id] = updated_on
        return updates
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Redmine API: {e}")
        return {}

async def check_for_updates(last_updates):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å last_updates.
    """
    url = f"{REDMINE_URL}/issues.json"
    headers = {
        "X-Redmine-API-Key": REDMINE_API_KEY
    }
    params = {
        "project_id": PROJECT_ID,
        "include": "journals"
    }
    try:
        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()
        issues = response.json().get("issues", [])
        updated_issues = []
        for issue in issues:
            issue_id = issue["id"]
            updated_on = issue["updated_on"]
            if issue_id not in last_updates:
                # –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞
                updated_issues.append({"issue": issue, "type": "new"})
                last_updates[issue_id] = updated_on
            elif updated_on > last_updates[issue_id]:
                # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞—è–≤–∫–µ
                updated_issues.append({"issue": issue, "type": "update"})
                last_updates[issue_id] = updated_on
        return updated_issues, last_updates
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Redmine API: {e}")
        return [], last_updates

async def send_notification(issue_data):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram.
    issue_data: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∑–∞—è–≤–∫–µ –∏ —Ç–∏–ø–æ–º —Å–æ–±—ã—Ç–∏—è ("new" –∏–ª–∏ "update").
    """
    try:
        issue = issue_data["issue"]
        event_type = issue_data["type"]
        issue_id = issue["id"]
        subject = issue["subject"]
        priority = issue.get("priority", {}).get("name", "–ù–µ —É–∫–∞–∑–∞–Ω")  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞—è–≤–∫–∏
        assigned_to = issue.get("assigned_to", {}).get("name", "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω")  # –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        status = issue.get("status", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")  # –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        created_on = issue.get("created_on", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")  # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        due_date = issue.get("due_date")  # –î–µ–¥–ª–∞–π–Ω –∑–∞—è–≤–∫–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å None)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        if created_on != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
            created_on_dt = datetime.strptime(created_on, "%Y-%m-%dT%H:%M:%SZ")
            created_on = created_on_dt.strftime("%d.%m.%Y %H:%M")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º due_date, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
        if due_date:
            try:
                due_date_dt = datetime.strptime(due_date, "%Y-%m-%dT%H:%M")
            except ValueError:
                due_date_dt = datetime.strptime(due_date + "T00:00", "%Y-%m-%dT%H:%M")
            due_date = due_date_dt.strftime("%d.%m.%Y %H:%M")
        else:
            due_date = None  # –ï—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω –Ω–µ —É–∫–∞–∑–∞–Ω

        journals = issue.get("journals", [])

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ assigned_to –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–ó–∞—è–≤–∫–∞ #{issue_id}: –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ '{assigned_to}'")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫–æ–π —á–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if "–°–°–ë –°–°–ë" in assigned_to:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ assigned_to —Å—Ç—Ä–æ–∫—É "SSB"
            chat_id = TELEGRAM_CHAT_ID_SSB
        else:
            chat_id = TELEGRAM_CHAT_ID_OTHER

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        if event_type == "new":
            message = (
                f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{issue_id}:\n"
                f"üìù –¢–µ–º–∞: {subject}\n"
                f"üö© –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n"
                f"üë§ –ù–∞–∑–Ω–∞—á–µ–Ω–∞: {assigned_to}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
                f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {created_on}\n"
            )
            if due_date:  # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–¥–ª–∞–π–Ω, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
                message += f"‚è≥ –î–µ–¥–ª–∞–π–Ω: {due_date}\n"
            message += f"üîó –°—Å—ã–ª–∫–∞: {REDMINE_URL}/issues/{issue_id}"
        elif event_type == "update":
            if journals:
                last_journal = journals[-1]
                user = last_journal.get("user", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                notes = last_journal.get("notes", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
                message = (
                    f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –∑–∞—è–≤–∫–µ #{issue_id}:\n"
                    f"üìù –¢–µ–º–∞: {subject}\n"
                    f"üö© –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n"
                    f"üë§ –ù–∞–∑–Ω–∞—á–µ–Ω–∞: {assigned_to}\n"
                    f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
                    f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {created_on}\n"
                )
                if due_date:  # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–¥–ª–∞–π–Ω, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
                    message += f"‚è≥ –î–µ–¥–ª–∞–π–Ω: {due_date}\n"
                message += (
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}\n"
                    f"üìÑ –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {notes}\n"
                    f"üîó –°—Å—ã–ª–∫–∞: {REDMINE_URL}/issues/{issue_id}"
                )
            else:
                message = (
                    f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –∑–∞—è–≤–∫–µ #{issue_id}:\n"
                    f"üìù –¢–µ–º–∞: {subject}\n"
                    f"üö© –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n"
                    f"üë§ –ù–∞–∑–Ω–∞—á–µ–Ω–∞: {assigned_to}\n"
                    f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
                    f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {created_on}\n"
                )
                if due_date:  # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–¥–ª–∞–π–Ω, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
                    message += f"‚è≥ –î–µ–¥–ª–∞–π–Ω: {due_date}\n"
                message += f"üîó –°—Å—ã–ª–∫–∞: {REDMINE_URL}/issues/{issue_id}"
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {event_type}")
            return

        await bot.send_message(chat_id=chat_id, text=message)
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}: {message}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞—è–≤–æ–∫.
    """
    last_updates = await get_last_issue_updates()  # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    while True:
        updated_issues, last_updates = await check_for_updates(last_updates)
        for issue_data in updated_issues:
            await send_notification(issue_data)
        await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ n-—Å–µ–∫—É–Ω–¥

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    asyncio.run(main())